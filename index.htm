<!DOCTYPE html>
<html>
<head>
	<title>IFC Model Viewer</title>
	<!-- Import the required scripts for the IFC model viewer -->
	<script src="https://cdn.jsdelivr.net/npm/mjs-utilities@2.0.0/dist/mjs-utilities.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/ifcjs@0.8.0/dist/ifc.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js"></script>
</head>
<body>
	<!-- Create a div element where the IFC model will be displayed -->
	<div id="myViewer" style="height: 600px"></div>

	<!-- Create a script that loads and displays the IFC model -->
	<script>
		// Load the IFC model from the same GitHub repository
		var url = "model.ifc";
		fetch(url)
			.then(response => response.arrayBuffer())
			.then(buffer => {
				// Parse the IFC model data
				var ifcModel = new ifc.Model();
				ifcModel.loadData(buffer);

				// Create a new Three.js scene and renderer
				var scene = new THREE.Scene();
				var renderer = new THREE.WebGLRenderer({ antialias: true });
				renderer.setSize(window.innerWidth, window.innerHeight);
				document.getElementById("myViewer").appendChild(renderer.domElement);

				// Create a Three.js mesh from the IFC model
				var mesh = ifcModel.getThreeMesh();
				scene.add(mesh);

				// Set up the camera and render the scene
				var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
				camera.position.set(0, 0, 10);
				var controls = new THREE.OrbitControls(camera, renderer.domElement);
				controls.enableDamping = true;
				controls.dampingFactor = 0.25;
				controls.screenSpacePanning = false;
				controls.minDistance = 1;
				controls.maxDistance = 50;
				controls.maxPolarAngle = Math.PI / 2;
				var animate = function () {
					requestAnimationFrame(animate);
					controls.update();
					renderer.render(scene, camera);
				};
				animate();
			});
	</script>
</body>
</html>
